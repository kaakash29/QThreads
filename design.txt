1. What needs to be stored in your thread structure? Note that you will need to save 
the current stack pointer when switching, as well as being able to deallocate the 
per-thread stack after thread exit.

Ans: The following are required to be stored on the thread structure:
        a. Pointer to the allocated stack (also useful during deletion)
        b. Current Value of the Stack Pointer (useful at the time of context switch)

We also need a Thread Control Block to have the following information:
        a. Thread ID
        b. Return Value (required when the thread becomes a zombie while its waiting for pthread_join)
        c. Attributes (like detached/joinable)
        d. start routine to start the thread execution
        e. argument for the start routine


2. The thread function can exit either (a) by calling qthread_exit or (b) by returning from 
the thread start function. How do you handle case (b)?

Ans: 


3. How do you deallocate the thread stack when the thread exits? Note that you can't call 
free() from the thread using the stack, as the stack will continue to be used until switch() 
moves to a new stack.
        (a) How do you do this for joinable threads?
        (b) For detached threads?

Ans: (a) We can maintain a queue for Terminated threads which will be waiting for join(). 
Once join() happens, we can free the thread stack from the caller thread where the join happened.
(b) We can maintain a middle layer between the caller thread and the spawned thread, and when a 
thread terminates, based on the attribute of the thread (whether detached/joinable), 
it can either free the stack for the detached thread or put the thread on the Termination 
Queue for the joinable thread.


4. How do you hold the return value for a thread if it exits before join() has been called?

Ans: When a thread terminates (which is expeced to join()), its thread ID and return 
value is of importance and must be retained till join() is invoked. Till then, it will 
remain in a zombie state. Thus, the stack will not be freed till join(). 


5. How many different lists (or types of lists) of threads do you have in your design?

Ans: We have 3 types of lists in our design. They are:
        a. Runnable Threads - ready to run
        b. Blocked Threads - waiting for some lock or I/O etc.
        c. Terminated Threads - threads which have finished execution but waiting for join(); 
           does not include the detached threads
        d. Running Threads - The threads which are already running 


6. How do you handle the exit of a detached thread?

Ans: In actual implementation, when a detached thread terminates, its thread ID is immediately 
made available for reuse, and its return value is ignored. So, to handle the exit of a detached thread, 
we need to free its stack immediately on exit.


7. What does your mutex structure look like? briefly describe algorithm for lock and unlock

Ans: A simple mutex structure would have a lock variable to specify whether the mutex is 
locked or unlocked and a queue specifying all the threads waiting on the mutex. 
Here is a very trivial implementation of lock and unlock 

mutex_lock (M):
       if M is already LOCKED : 
               enqueue(currentThread)
               switch( getNewThreadFromReadyQueue() )
       else M is NOT LOCKED : 
               M->locked = 1
               enqueue(currentThread)
end.

mutex_unlock(M):
       if M->queue is EMPTY:        //there are no threads waiting for this mutex
               m->locked = 0                //unlock the mutex
       else
               run(dequeue(M-<queue))
end.


8. What does your condition variable structure look like? Briefly describe wait and signal. 
Can you directly use your mutex lock/unlock functions, or factor them in a way that you can 
use the same mutex code from mutex_lock/unlock and cond_wait?

Ans:


9. When do you call select?
    (a) How do you know which file descriptors to put in your fdsets?
    (b) How do you calculate the timeout?

Ans: The select system call allow a program to monitor multiple file descriptors, 
waiting until one or more of the file descriptors become "ready" for some class of  I/O  
operation (e.g.,  input possible). Strictly, it is a question of whether a read operation on 
the file descriptor will block or not. If you execute read() on a file descriptor â€” such as that 
connected to a serial port and there is no data to read, then the call will hang 
until there is some data to read. Whenever a thread requests a read from a file descriptor 
using the qthread_read system call, a call to select is made to check if the file descriptor 
will block on read/write.
(a)  If the fd is in non blocking state but read/write call either returns a -1 / EAAGAIN 
(reads/write no data), the respective fd should be put on their respective fdsets
(b)  the timeout in select system call should be set to 0 as we dont want our select system call 
to wait on the operation we are using it just for testing the avaialbility of data.
 
 
10. Where do you put a thread structure
        (a) When the thread is blocked in usleep?
        (b) When it is blocked on I/O? Note that there are several reasonable answers to (b). 
When blocked on I/O, is the relationship between file descriptor and thread stored in 
the thread structure, or some external data structure?

Ans: (a) When the thread is blocked in usleep the thread will be added to the blocked queue.
If we have a Suspended Queue (i.e. we maintain a Suspended state for thread), then it can go to the 
Suspended Queue.
(b) When the thread is blocked on I/O the thread will be blocked and moved to the Blocked queue.


11. How do you organize your lists? (see discussion of linked lists in the PDF)

Ans: A singly linked list can be used to organize the thread queue. The structure can have a 
qthread pointer pointing to the thread structure and a next pointers pointing to the next 
element in the list. Two pointers head and tail pointers can be used to add and delete elements 
from the queue. 


12. Why do you need a thread structure for the OS-provided thread corresponding to 
the original process? What happens if that thread calls qthread_exit? How is this different 
from any other thread calling qthread_exit?

Ans: A thread structure is needed for the OS-provided thread corresponding to the original process
because it can wait on other threads to get the return values by qthread_join().
When this thread calls qthread_exit(), then this thread and all its child threads get terminated at 
once i.e. it terminates the entire process.
This is different from any other thread calling the qthread_exit() as that will only terminate the 
calling thread.

